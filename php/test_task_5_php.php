//# Задание 5.
//# На вход подается строка, содержащая последовательность различных скобок (), {}, [].
//# Напишите функцию, которая проверяет, что последовательность скобок корректна.
//# Решение 5.
//# Подобного рода задачи удобнее всего реализовать через структуру данных стек.

<?php
function isBracketsCorrect(string $someString) {

    // создаем пустой массив для хранения открывающих скобок
    $stack = [];
    // проходим по каждому символу строки
    for ($i = 0; $i < strlen($someString); $i++) {
        $bracket = $someString[$i];
        // если текущий символ - открывающая скобка, добавляем ее в массив
        if (strstr('({[', $bracket)) {
            array_push($stack, $bracket);
        } else {
            if (count($stack) == 0) {
                return False;
            }
            // извлекаем последнюю добавленную открывающую скобку из списка
            $lastOpenBracket = array_pop($stack);
            // проверяем, соответствует ли закрывающая скобка последней добавленной открывающей скобке
            if ($bracket == ')' && $lastOpenBracket != '(') {
                return False;
            }
            if ($bracket == '}' && $lastOpenBracket != '{') {
                return False;
            }
            if ($bracket == ']' && $lastOpenBracket != '[') {
                return False;
            }
        }
    }
    // если в итоге в массиве не осталось ни одной открывающей скобки, то возвращаем true, иначе false
    return count($stack) == 0;
};

$brackets = '{[(}])'; // вводим сюда скобочную последовательность
if (isBracketsCorrect($brackets)) {
    echo 'Правильно';
} else {
    echo 'Не правильно';
};

// Пример:
// {[(}]) – не правильно
// {()[]} – правильно