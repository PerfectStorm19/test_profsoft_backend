# Задание 5.
# На вход подается строка, содержащая последовательность различных скобок (), {}, [].
# Напишите функцию, которая проверяет, что последовательность скобок корректна.
# Решение 5.
# Подобного рода задачи удобнее всего реализовать через структуру данных стек.

def is_brackets_correct(some_string):
    '''функция  проверяет корректность последовательности скобок в переданной строке
    если переданная строка содержит правильную последовательность открывающих и закрывающих скобок,
    то функция возвращает True, в противном случае - False'''

    # создается пустой стек
    stack = []

    # осуществляется перебор каждой скобки в переданной строке
    for bracket in some_string:

        # если скобка открывающая, то она добавляется в стек
        if bracket in '({[':
            stack.append(bracket)

        # если скобка закрывающая, то проверяем, есть ли соответствующая ей открытая скобка в стеке
        else:

            # если стек пустой, то возвращается False
            if not stack:
                return False

            # если стек не пустой, то извлекается последняя добавленная открывающая скобка
            # и проверяется, является ли текущая закрывающая скобка соответствующей последней открывающей скобке
            last_open_bracket = stack.pop()
            if bracket == ')' and last_open_bracket != '(':
                return False
            if bracket == '}' and last_open_bracket != '{':
                return False
            if bracket == ']' and last_open_bracket != '[':
                return False

    # после завершения перебора всех скобок, если стек опустел, то возвращается True, иначе возвращается False
    return not stack

# тут можно ввести свою последовательность скобок
brackets = input()
print("Правильно" if is_brackets_correct(brackets) else "Не правильно")

# Пример:
# {[(}]) – не правильно
# {()[]} – правильно